import { PdfAnalyzer } from './PdfAnalyzer.js';
import { ExcelAnalyzer } from './ExcelAnalyzer.js';
import { nanoid } from 'nanoid';

/**
 * Î¨∏ÏÑú Î∂ÑÏÑùÍ∏∞ ÌÜµÌï© Í¥ÄÎ¶¨Ïûê
 */
export class DocumentAnalyzer {
  /**
   * ÌååÏùº ÌôïÏû•ÏûêÏóê Îî∞Îùº Ï†ÅÏ†àÌïú Î∂ÑÏÑùÍ∏∞Î•º ÏÑ†ÌÉùÌïòÍ≥† Î∏îÎ°ùÏúºÎ°ú Î≥ÄÌôò
   * @param {Object} analysisResult - Î∂ÑÏÑù Í≤∞Í≥º Í∞ùÏ≤¥
   * @returns {Array} Î∏îÎ°ù Î∞∞Ïó¥
   */
  static convertToBlocks(analysisResult) {
    const filename = analysisResult.file.name;
    
    try {
      // PDF ÌååÏùº
      if (PdfAnalyzer.isPdfFile(filename)) {
        return PdfAnalyzer.convertToBlocks(analysisResult);
      }
      
      // Excel ÌååÏùº
      if (ExcelAnalyzer.isExcelFile(filename)) {
        return ExcelAnalyzer.convertToBlocks(analysisResult);
      }
      
      // ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãù
      return this.createUnsupportedFileBlock(analysisResult);
      
    } catch (error) {
      console.error('Î¨∏ÏÑú Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∏îÎ°ùÏúºÎ°ú Î≥ÄÌôò Ï§ë Ïò§Î•ò:', error);
      return this.createErrorBlock(analysisResult, error);
    }
  }
  
  /**
   * ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏóê ÎåÄÌïú Í∏∞Î≥∏ Î∏îÎ°ù ÏÉùÏÑ±
   * @param {Object} analysisResult - Î∂ÑÏÑù Í≤∞Í≥º Í∞ùÏ≤¥
   * @returns {Array} Î∏îÎ°ù Î∞∞Ïó¥
   */
  static createUnsupportedFileBlock(analysisResult) {
    
    return [
      {
        id: nanoid(),
        type: 'heading1',
        content: `üìÑ ${analysisResult.file.name} Î∂ÑÏÑù Í≤∞Í≥º`,
        focused: false
      },
      {
        id: nanoid(),
        type: 'text',
        content: `‚ö†Ô∏è Ïù¥ ÌååÏùº ÌòïÏãùÏùÄ ÌòÑÏû¨ Î∏îÎ°ù Î≥ÄÌôòÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.`,
        focused: false
      },
      {
        id: nanoid(),
        type: 'text',
        content: `ÌååÏùºÎ™Ö: ${analysisResult.file.name}`,
        focused: false
      },
      {
        id: nanoid(),
        type: 'text',
        content: `Î∂ÑÏÑù ÏãúÍ∞Ñ: ${analysisResult.timestamp.toLocaleString()}`,
        focused: false
      }
    ];
  }
  
  /**
   * Ïò§Î•ò Î∞úÏÉù Ïãú Í∏∞Î≥∏ Î∏îÎ°ù ÏÉùÏÑ±
   * @param {Object} analysisResult - Î∂ÑÏÑù Í≤∞Í≥º Í∞ùÏ≤¥
   * @param {Error} error - Ïò§Î•ò Í∞ùÏ≤¥
   * @returns {Array} Î∏îÎ°ù Î∞∞Ïó¥
   */
  static createErrorBlock(analysisResult, error) {
    
    return [
      {
        id: nanoid(),
        type: 'heading1',
        content: `‚ùå ${analysisResult.file.name} Î∂ÑÏÑù Ïò§Î•ò`,
        focused: false
      },
      {
        id: nanoid(),
        type: 'text',
        content: `Î∏îÎ°ù Î≥ÄÌôò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`,
        focused: false
      },
      {
        id: nanoid(),
        type: 'code',
        content: `Ïò§Î•ò ÏÉÅÏÑ∏:\n${error.stack || 'Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§ ÏóÜÏùå'}`,
        focused: false
      }
    ];
  }
  
  /**
   * ÏßÄÏõêÌïòÎäî ÌååÏùº ÌòïÏãù Î™©Î°ù Î∞òÌôò
   * @returns {Array} ÏßÄÏõê ÌååÏùº ÌòïÏãù Î∞∞Ïó¥
   */
  static getSupportedFormats() {
    return [
      { name: 'PDF', extensions: ['.pdf'], analyzer: 'PdfAnalyzer' },
      { name: 'Excel', extensions: ['.xls', '.xlsx', '.xlsm', '.xlsb'], analyzer: 'ExcelAnalyzer' }
    ];
  }
  
  /**
   * ÌååÏùºÏù¥ ÏßÄÏõêÎêòÎäî ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏
   * @param {string} filename - ÌååÏùºÎ™Ö
   * @returns {boolean} ÏßÄÏõê Ïó¨Î∂Ä
   */
  static isSupported(filename) {
    const supportedFormats = this.getSupportedFormats();
    const extension = filename.toLowerCase();
    
    return supportedFormats.some(format => 
      format.extensions.some(ext => extension.endsWith(ext))
    );
  }
}

// Í∞úÎ≥Ñ Î∂ÑÏÑùÍ∏∞ÎèÑ export
export { PdfAnalyzer } from './PdfAnalyzer.js';
export { ExcelAnalyzer } from './ExcelAnalyzer.js'; 